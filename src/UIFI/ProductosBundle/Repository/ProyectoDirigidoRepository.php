<?php

namespace UIFI\ProductosBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UIFI\ReportesBundle\Repository\IReportableRepository;

/**
 * ProyectoDirigidoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProyectoDirigidoRepository extends EntityRepository implements IReportableRepository
{
    /**
     * Funcion que se encarga de eliminar todos los registros
     * de la entidad
    */
    public function deleteAll(){
      $em = $this->getEntityManager();
      return $em->createQuery('DELETE FROM UIFIProductosBundle:ProyectoDirigido')->execute();
    }

    /**
    * Cuenta el número de articulos publicados por año en la facultad
    *
    */
    public function getCountAllByYear(){
      $em = $this->getEntityManager();
      $connection = $em->getConnection();
      $sql = 'SELECT COUNT(a.anual) AS cantidad, a.anual AS fecha FROM  proyecto_dirigido a
              GROUP BY a.anual';
      $em = $this->getEntityManager();
      $statement = $connection->prepare($sql);
      $statement->execute();
      $results = $statement->fetchAll();
      return $results;
    }


    /**
     * Función que se encarga de contar el número de proyectos dirigidos  que tiene publicado
     * un grupo de investigación de acuerdo de las publicaciones realizadas por
     * cada uno de los integrantes del grupo de Investigación.
     *
     * @param $code Id del grupo de investigación.
     * @return Integer con la cuenta de artículos por grupo.
     *
    */
    public function getCountByGrupo( $code ){
      $em = $this->getEntityManager();
      $connection = $em->getConnection();
      $sql = "SELECT count(DISTINCT a.id) as cantidad
        FROM  grupo g, integrante i,grupo_integrante gi,
                proyecto_dirigido a,integrantes_proyectos_dirigido ia
        WHERE g.id = :code
          AND gi.grupo_id = g.id
          AND gi.integrante_id = i.id
          AND a.grupo = g.id
          AND ia.integrante_id = i.id AND ia.proyectodirigido_id  = a.id";

      $statement = $connection->prepare($sql);
      $statement->bindValue('code', $code);
      $statement->execute();
      $results = $statement->fetchAll();
      if( count($results)>0){
          $value = $results[0];
          $value = intval($value['cantidad']);
          return $value;
      }
      return 0;
    }

    /**
     * Función que se encarge de contar el número de proyectos dirigidos que tiene publicado
     * un grupo de investigación de acuerdo a las publicaciones realizadas por los
     * integrantes , discriminado por año.
     *
     * @param $code Código del grupo de investigación.
     * @return Integer con la cuenta de artículos por grupo.
    */
    public function getCountByYear($code){
      $em = $this->getEntityManager();
      $connection = $em->getConnection();
      $sql = 'SELECT COUNT(DISTINCT (p.id)) as cantidad, g.nombre, p.anual, g.id
              FROM proyecto_dirigido p
              inner join integrantes_proyectos_dirigido ip
                  on p.id = ip.proyectodirigido_id
              inner join integrante i
                  on i.id = ip.integrante_id
              inner join grupo_integrante gi
                  on gi.integrante_id = i.id
              inner join grupo g
                  on g.id  = gi.grupo_id
                  and g.id =:code
              GROUP BY g.id, p.anual';
      $statement = $connection->prepare($sql);
      $statement->bindValue('code', $code);
      $statement->execute();
      $results = $statement->fetchAll();
      return $results;
    }

    /**
     * Se obtienen la cantidad de artículos ppublicados por integrante en un
     * grupo de investigación especificado.
     *
     * @param $code Código del integrante.
     * @param $idGrupo identificador del grupo de investigación.
     * @return Integer: Número de artículos publicados.
    */
    public function getCantidadByIntegrante($code,$idGrupo){
        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $query = "SELECT  count(*) as numeroProyectos
        FROM integrante i , grupo g, grupo_integrante gi, proyecto_dirigido a,
            integrantes_proyectos_dirigido ia
        WHERE i.id= :code
            AND gi.grupo_id = g.id
            AND g.id = :idGrupo
            AND gi.integrante_id = i.id
            AND ia.integrante_id = i.id
            AND ia.proyectodirigido_id = a.id";
          $statement = $connection->prepare($query);
          $statement->bindValue('code', $code);
          $statement->bindValue('idGrupo', $idGrupo);
          $statement->execute();
          $results = $statement->fetchAll();
          if( count($results)>0){
            $numeroArticulos = $results[0];
            $numeroArticulos = intval($numeroArticulos['numeroProyectos']);
            return $numeroArticulos;
          }
          return 0;
     }
     /**
      * Función que se encarga de contar la cantidad de artículos publicados por año
      * por un integrante especificado , en un grupo especificado
      * @param $code Código del integrante.
      * @param $idGrupo identificador del grupo de investigación.
      * @return  arreglo de arreglos con [cantidad,anual]
     */
     public function getCantidadIntegranteAnual($code,$idGrupo){
       $em = $this->getEntityManager();
       $connection = $em->getConnection();
       $query = 'SELECT COUNT(*) as cantidad, a.anual
           FROM grupo g, integrante i , grupo_integrante gi, proyecto_dirigido a, integrantes_proyectos_dirigido ia
           WHERE g.id= :idGrupo
            AND i.id= :code
            AND gi.grupo_id = g.id
            AND gi.integrante_id = i.id
            AND ia.integrante_id = i.id
            AND ia.proyectodirigido_id = a.id
           GROUP BY a.anual';
       $statement = $connection->prepare($query);
       $statement->bindValue('code', $code);
       $statement->bindValue('idGrupo', $idGrupo);
       $statement->execute();
       $results = $statement->fetchAll();
       return $results;
     }
}
